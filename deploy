#!/usr/bin/env python3

import json
import optparse
import os
import random
import string
import sys
import subprocess

class GoEnv(object):
    def __init__(self, conf):
        self.os = conf['os']
        arch = conf['arch']
        if arch.startswith('arm'):
            self.arch = 'arm'
            self.arm = arch[-1]
        else:
            self.arch = arch
            self.arm = None

    def get_env(self):
        env = os.environ.copy()
        env['GOOS'] = self.os
        env['GOARCH'] = self.arch
        if self.arm is not None:
            env['GOARM'] = self.arm
        return env

    def desc(self):
        return "%s-%s" % (self.os, self.arch)

class Dst(object):
    def __init__(self, addr):
        self.addr = addr

    def install(self, src, dst, perm='755', owner='root'):
        key = uniq_id()

        tmp = '/tmp/%s' % key

        # copy the file to /tmp
        if subprocess.call(['scp', src, '%s:%s' % (self.addr, tmp)]) != 0:
            raise Exception()

        # change owner of file
        if subprocess.call(['ssh', self.addr, 'sudo', 'chown', owner, tmp]) != 0:
            raise Exception()

        # change permissions
        if subprocess.call(['ssh', self.addr, 'sudo', 'chmod', perm, tmp]) != 0:
            raise Exception()

        # move the tmp file to the right location
        if subprocess.call(['ssh', self.addr, 'sudo', 'mv', tmp, dst]) != 0:
            raise Exception()

    def sudo(self, cmd):
        if subprocess.call(['ssh', self.addr, 'sudo'] + cmd) != 0:
            raise Exception()


def uniq_id(size=8):
    c = string.ascii_uppercase + string.ascii_lowercase + string.digits
    return ''.join(
        random.SystemRandom().choice(c) for _ in range(size))

def call(cmd, env):
    p = subprocess.Popen(cmd, env=env)
    return p.wait() == 0

def deploy_server(name, conf):
    print('Deploying Server: %s' % name)
    env = GoEnv(conf)

    if not call(['rake'], env = env.get_env()):
        raise Exception()

    desc = env.desc()
    dest = Dst(name)

    dest.install(
        os.path.join('bin', desc, 'piholed'),
        '/usr/local/bin/piholed')

    dest.install(
        'etc/piholed.service',
        '/lib/systemd/system/piholed.service',
        '644')

    dest.sudo(['systemctl', 'daemon-reload'])
    dest.sudo(['systemctl', 'restart', 'piholed.service'])

def deploy_client(name, conf):
    print('Deploying Client: %s' % name)
    env = GoEnv(conf)

    # Build
    if not call(['rake'], env=env.get_env()):
        raise Exception()

    desc = env.desc()
    dest = Dst(name)

    dest.install(
        os.path.join('bin', desc, 'pihole'),
        '/usr/local/bin/pihole')

    dest.install(
        'etc/pihole.service',
        '/lib/systemd/system/pihole.service',
        '644')

    dest.sudo(['systemctl', 'daemon-reload'])
    dest.sudo(['systemctl', 'restart', 'pihole.service'])

def read_conf(filename):
    with open(filename, 'r') as r:
        return json.load(r)

def main():
    parser = optparse.OptionParser()
    parser.add_option('--conf',
        dest='conf',
        type='string',
        default='deploy.conf',
        help='')
    parser.add_option('--to-clients',
        dest='to_clients',
        action='store_true',
        default=False,
        help='')
    parser.add_option('--to-servers',
        dest='to_servers',
        action='store_true',
        default=False,
        help='')
    opts, args = parser.parse_args()

    conf = read_conf(opts.conf)

    servers = conf.get('servers', [])
    clients = conf.get('clients', [])

    # neither option implies all
    if not opts.to_clients and not opts.to_servers:
        opts.to_clients = True
        opts.to_servers = True

    if opts.to_servers:
        for name, conf in servers.items():
            deploy_server(name, conf)

    if opts.to_clients:
        for name, conf in clients.items():
            deploy_client(name, conf)

if __name__ == '__main__':
    sys.exit(main())
