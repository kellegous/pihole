// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/api.proto

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	api/api.proto

It has these top-level messages:
	RegisterReq
	RegisterRes
	PingReq
	PingRes
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RegisterReq struct {
	Hosts []string `protobuf:"bytes,1,rep,name=hosts" json:"hosts,omitempty"`
	Addr  string   `protobuf:"bytes,2,opt,name=addr" json:"addr,omitempty"`
	Id    string   `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
}

func (m *RegisterReq) Reset()                    { *m = RegisterReq{} }
func (m *RegisterReq) String() string            { return proto.CompactTextString(m) }
func (*RegisterReq) ProtoMessage()               {}
func (*RegisterReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RegisterReq) GetHosts() []string {
	if m != nil {
		return m.Hosts
	}
	return nil
}

func (m *RegisterReq) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *RegisterReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type RegisterRes struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *RegisterRes) Reset()                    { *m = RegisterRes{} }
func (m *RegisterRes) String() string            { return proto.CompactTextString(m) }
func (*RegisterRes) ProtoMessage()               {}
func (*RegisterRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RegisterRes) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type PingReq struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *PingReq) Reset()                    { *m = PingReq{} }
func (m *PingReq) String() string            { return proto.CompactTextString(m) }
func (*PingReq) ProtoMessage()               {}
func (*PingReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PingReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type PingRes struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *PingRes) Reset()                    { *m = PingRes{} }
func (m *PingRes) String() string            { return proto.CompactTextString(m) }
func (*PingRes) ProtoMessage()               {}
func (*PingRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PingRes) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func init() {
	proto.RegisterType((*RegisterReq)(nil), "api.RegisterReq")
	proto.RegisterType((*RegisterRes)(nil), "api.RegisterRes")
	proto.RegisterType((*PingReq)(nil), "api.PingReq")
	proto.RegisterType((*PingRes)(nil), "api.PingRes")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Api service

type ApiClient interface {
	Register(ctx context.Context, opts ...grpc.CallOption) (Api_RegisterClient, error)
	Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingRes, error)
}

type apiClient struct {
	cc *grpc.ClientConn
}

func NewApiClient(cc *grpc.ClientConn) ApiClient {
	return &apiClient{cc}
}

func (c *apiClient) Register(ctx context.Context, opts ...grpc.CallOption) (Api_RegisterClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Api_serviceDesc.Streams[0], c.cc, "/api.Api/Register", opts...)
	if err != nil {
		return nil, err
	}
	x := &apiRegisterClient{stream}
	return x, nil
}

type Api_RegisterClient interface {
	Send(*RegisterReq) error
	Recv() (*RegisterRes, error)
	grpc.ClientStream
}

type apiRegisterClient struct {
	grpc.ClientStream
}

func (x *apiRegisterClient) Send(m *RegisterReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *apiRegisterClient) Recv() (*RegisterRes, error) {
	m := new(RegisterRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *apiClient) Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingRes, error) {
	out := new(PingRes)
	err := grpc.Invoke(ctx, "/api.Api/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Api service

type ApiServer interface {
	Register(Api_RegisterServer) error
	Ping(context.Context, *PingReq) (*PingRes, error)
}

func RegisterApiServer(s *grpc.Server, srv ApiServer) {
	s.RegisterService(&_Api_serviceDesc, srv)
}

func _Api_Register_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ApiServer).Register(&apiRegisterServer{stream})
}

type Api_RegisterServer interface {
	Send(*RegisterRes) error
	Recv() (*RegisterReq, error)
	grpc.ServerStream
}

type apiRegisterServer struct {
	grpc.ServerStream
}

func (x *apiRegisterServer) Send(m *RegisterRes) error {
	return x.ServerStream.SendMsg(m)
}

func (x *apiRegisterServer) Recv() (*RegisterReq, error) {
	m := new(RegisterReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Api_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).Ping(ctx, req.(*PingReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Api_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Api",
	HandlerType: (*ApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Api_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Register",
			Handler:       _Api_Register_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/api.proto",
}

func init() { proto.RegisterFile("api/api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 202 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0xcf, 0x4e, 0x84, 0x30,
	0x10, 0xc6, 0x29, 0x45, 0x91, 0xf1, 0x4f, 0xcc, 0xc4, 0x43, 0xe5, 0x44, 0x1a, 0x13, 0x39, 0xa1,
	0x51, 0x5f, 0xc0, 0x93, 0x57, 0xd3, 0x37, 0xe8, 0xa6, 0x0d, 0x3b, 0x87, 0x5d, 0xba, 0x0c, 0xef,
	0x9f, 0x4d, 0xcb, 0xb2, 0x21, 0xdc, 0xfa, 0xcd, 0xaf, 0xf9, 0x7d, 0xed, 0xc0, 0xa3, 0x0d, 0xf4,
	0x61, 0x03, 0x75, 0x61, 0x1c, 0xa6, 0x01, 0xa5, 0x0d, 0xa4, 0xff, 0xe0, 0xde, 0xf8, 0x9e, 0x78,
	0xf2, 0xa3, 0xf1, 0x27, 0x7c, 0x81, 0x9b, 0xfd, 0xc0, 0x13, 0x2b, 0xd1, 0xc8, 0xb6, 0x32, 0x73,
	0x40, 0x84, 0xc2, 0x3a, 0x37, 0xaa, 0xbc, 0x11, 0x6d, 0x65, 0xd2, 0x19, 0x9f, 0x20, 0x27, 0xa7,
	0x64, 0x9a, 0xe4, 0xe4, 0xf4, 0xfb, 0x5a, 0xc4, 0xa8, 0xa0, 0x3c, 0x78, 0x66, 0xdb, 0x7b, 0x25,
	0xd2, 0x9d, 0x25, 0xea, 0x57, 0x28, 0xff, 0xe9, 0xd8, 0xc7, 0xb6, 0xd9, 0x11, 0xb9, 0x4c, 0x8e,
	0x2b, 0xe2, 0x2d, 0xfa, 0xb2, 0x20, 0x7f, 0x03, 0xe1, 0x0f, 0xdc, 0x2d, 0x2d, 0xf8, 0xdc, 0xc5,
	0xbf, 0xac, 0x5e, 0x5f, 0x6f, 0x27, 0xac, 0xb3, 0x56, 0x7c, 0x0a, 0x7c, 0x83, 0x22, 0x7a, 0xf1,
	0x21, 0xf1, 0x4b, 0x7b, 0xbd, 0x4e, 0xac, 0xb3, 0xdd, 0x6d, 0x5a, 0xcb, 0xf7, 0x39, 0x00, 0x00,
	0xff, 0xff, 0x2a, 0x57, 0xec, 0x4f, 0x27, 0x01, 0x00, 0x00,
}
